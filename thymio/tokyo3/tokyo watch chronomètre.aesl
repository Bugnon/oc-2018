<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">
# chronometer
var c_sec
var c_min
var c_hr
var c_pm
var c_actif

 c_sec = 0
 c_min = 0
 c_hr = 0
 
 timer.period[0] = 1000 #= à une sec

######### Chrono

 onevent timer0
 	if c_actif==1 then	#demarrage
		 c_sec++
		 when c_sec == 60 do # temps qui s'additionne
		 	c_sec = 0	
		 	c_min++
		 end
		 when c_min==60 do
		 	c_min=0
		 	c_hr++
		end
	 
	 	when c_hr==12 and c_pm==0 do
	 		c_hr=0
	 		c_pm=1	
	 	end
	 	when c_hr==12 and c_pm==1 do # thymio qui peut que aller à 											14. Donc on va jusqu'à 12 et on passe à une notation anglaise avec pm et am
	 		c_hr=0
	 		c_pm=0	
	 	end
	 end
	
######### Controles
	
onevent button.center   #demmarage pause
	when button.center==1 do
		if c_actif==0 then
			c_actif=1
		elseif c_actif==1 then
			c_actif=0
		end
	end
	
onevent button.backward  # remet à 0 qd il est en pause
	
 	c_sec = 0
 	c_min = 0
 	c_hr = 0
 

######### Affichage
onevent acc
	if c_sec&lt;20 then #secondes
		call leds.circle((c_sec&amp;1)*32,(c_sec&amp;2)*16,(c_sec&amp;4)*8,(c_sec&amp;8)*4,(c_sec&amp;16)*2,(c_sec&amp;32)*1,0,0)
	end
	if c_sec>19 and c_sec&lt;40 then #minutes
		call leds.circle((c_min&amp;1)*32,(c_min&amp;2)*16,(c_min&amp;4)*8,(c_min&amp;8)*4,(c_min&amp;16)*2,(c_min&amp;32)*1,0,0)
	end
	if c_sec>39 then #heures
		call leds.circle((c_hr&amp;1)*32,(c_hr&amp;2)*16,(c_hr&amp;4)*8,(c_hr&amp;8)*4,(c_hr&amp;16)*2,(c_hr&amp;32)*1,0,0)
	end
	if c_pm==1 then  #pour afficher quand on passe pm
		call leds.top(32,0,0)
	else
		call leds.top(0,0,0)
	end</node>


</network>
