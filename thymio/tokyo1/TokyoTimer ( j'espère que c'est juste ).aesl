 <!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOP"/>
<constant value="1" name="COUNT"/>
<constant value="2" name="ALARM"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="7100" name="thymio-II"># file TimerDemo

# Pierre Gaglio

var t_sec = 0
var t_min = 0
var t_hr = 0
var t_state = STOP

# 0: stop - setting timer (blue)
# 1: count - counting down (green)
# 2: alarm (red)

timer.period[0]=1000

onevent buttons
  when button.forward==1  do t_sec++   end  # increment seconds
  when button.backward==1 do t_sec--   end  # decrement seconds
  when button.center==1   do t_state=STOP end  # stop alarm
  when button.right==1    do t_state=COUNT end  # start timer
  
  call leds.buttons((sec&amp;1)*32, (sec&amp;2)*16, (sec&amp;4)*8, (sec&amp;8)*4)

onevent timer0
  if  t_state==STOP then
  	call leds.top(0, 0, 32)
  	
  elseif  t_state==COUNT then
  	call leds.top(0, 32, 0)
  	sec--
  	call sound.freq(880, 1)
  	if  sec==0 then
  		t_state=ALARM
  	end
  elseif t_state==ALARM then
  	call leds.top(32, 0, 0)
	call sound.freq(880, 30)
  end</node>

timer.period[1] 

onevent timer1 

	t_sec-- #Décrémente les secondes
	
	when t_sec >= 0 do #Reset les secondes chaque minute
		t_sec = 60
		t_min-- #Décrémente les minutes chaque 60s
	end
	
	when t_min >= 0 do #Reset les minutes chaque heure
		t_min = 60
		t_hr-- #Décrémente l'heure chaque 60minutes
	end
	
	when t_hr >= 15 do #Arrête le chronomètre après 15 heures passées
		t_state++	  #Passe en état arrêté

	end


VRAIE PARTIE

var t_s = 0
var t_m = 0
var t_h = 0
var t_state = 0 # 4 états différents ( 0= choix du mode, 1= choix du 	temps du timer, 3= arrêt du timer après sonnerie) 

onevent

	when button.center==1 do	
		if t_state==0 then	#Passe la minuterie en mode sélection temps
		c_state++
		
		elseif 	t_state==1 then	#Passe la minuterie en mode décompte
				t_state++
				timer.period[0] = 1000
				
		elseif 	t_state==2 then	#passe la minuterie en mode arrêt
				t_state==0
				t_s=0
				t_m=0
				t_h=0
	
	end


onevent timer1 

	t_s-- #Décrémente les secondes
	
	when t_s = 0 do #Reset les secondes chaque minute
		t_s = 60
		t_m-- #Décrémente les minutes chaque 60s
	end
	
	when t_m = 0 do #Reset les minutes chaque heure
		t_m = 60
		t_h-- #Décrémente l'heure chaque 60minutes
	end
	
	when t_h = 15 do #Arrête le chronomètre après 15 heures passées
		t_state++	  #Passe en état arrêté

end



onevent prox

	#affiche les secondes en binaire sur les capteurs frontaux
	call leds.prox.h((t_sec&amp;1)*32,(t_sec&amp;2)*16,(t_sec&amp;4)*8,(t_sec&amp;8)*4,(t_sec&amp;16)*2,(t_sec&amp;32)*1,0,0)
	#affiche les minutes en binaire sur le cercle
	call leds.circle((t_min&amp;1)*32,(t_min&amp;2)*16,(t_min&amp;4)*8,(t_min&amp;8)*4,(t_min&amp;16)*2,(t_min&amp;32)*1,0,0)
	#affiche les heures en binaire sur les boutons
	call leds.buttons((t_hr&amp;1)*32,(t_hr&amp;2)*16,(t_hr&amp;4)*8,(t_hr&amp;8)*4)
end

#FIN CHRONO

</node>

</network>
