<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="45620" name="thymio-II"># Auteur : Hugo Ducommun
# Date : 21 septembre 2018
# Système de chronomètre pouvant stocker 3 temps intermédiaires

##########################################################
#DÉCLARATION DES VARIABLES

var c_h = 0
var c_m = 0	#Chrono normal
var c_s = 0

var c_h_mem1 = 0
var c_m_mem1 = 0 #Temps enregistré N°1
var c_s_mem1 = 0

var c_h_mem2 = 0
var c_m_mem2 = 0 #Temps enregistré N°2
var c_s_mem2 = 0

var c_h_mem3 = 0
var c_m_mem3 = 0 #Temps enregistré N°3
var c_s_mem3 = 0

var c_state = 0  #État du chronomètre (0 = éteint, 1 = allumé et 2 = arrêté)
var c_mem = 0	 #Indique le nombre de temps déjà enregistré, s'il y en a déjà 3, ne fait rien.

#FIN DÉCLARATION DES VARIABLES
##########################################################
#DÉBUT CHRONO

call leds.prox.h(0, 0, 0, 0, 0, 0, 0, 0)
call leds.circle(0, 0, 0, 0, 0, 0, 0, 0) #Remet les leds à zéro
call leds.buttons(0, 0, 0, 0)
call leds.top(32, 32, 0)				 #S'allume en jaune pour indiquer le mode chronomètre

onevent buttons

when button.center==1 do	#Choisis si le chrono démarre, s'arrête ou s'efface.
	if c_state==0 then
		c_state++
		timer.period[0] = 1
	elseif c_state==1 then
		c_state++
		timer.period[0] = 0
	else
		c_state=0
		c_h=0
		c_m=0
		c_s=0
		
		c_h_mem1=0	#Reset des variables
		c_m_mem1=0
		c_s_mem1=0
		
		c_h_mem2=0
		c_m_mem2=0
		c_s_mem2=0
		
		c_h_mem3=0
		c_m_mem3=0
		c_s_mem3=0
		
		call leds.prox.h(0, 0, 0, 0, 0, 0, 0, 0)
		call leds.circle(0, 0, 0, 0, 0, 0, 0, 0) #Remet les leds à zéro
		call leds.buttons(0, 0, 0, 0)
	end
end

when button.backward == 1 do	#Enregistre le temps en appuyant sur le bouton arrière, 3 enregistrements possibles
	if  c_mem == 0 then
		c_mem++
		c_h_mem1 = c_h
		c_m_mem1 = c_m
		c_s_mem1 = c_s
	elseif c_mem == 1 then
		c_mem++
		c_h_mem2 = c_h
		c_m_mem2 = c_m
		c_s_mem2 = c_s
	elseif c_mem == 2 then
		c_mem++
		c_h_mem3 = c_h
		c_m_mem3 = c_m
		c_s_mem3 = c_s
	else 
								#Sinon ne fait rien
	end

end

onevent timer0

	c_s++ #incrémente les secondes
	
	when c_s >= 60 do #reset les secondes chaque minute
		c_s = 0
		c_m++ #incrémente les minutes chaque 60s
	end
	
	when c_m >= 60 do #reset les minutes chaque heure
		c_m = 0
		c_h++ #incrémente l'heure chaque 60minutes
	end
	
	when c_h >= 16 do #passe AM en 1 après 12h s'il vaut 0
		c_h = 0 #reset l'heure
	end

onevent prox

if prox.ground.reflected[0]>=200 or prox.ground.reflected[1]>=200 then	#Tant que la main est sur les capteurs du dessous, affiche le temps enregistré N°1

	#affiche les secondes enregistrées en binaire sur les capteurs frontaux
	call leds.prox.h((c_s_mem1&amp;1)*32,(c_s_mem1&amp;2)*16,(c_s_mem1&amp;4)*8,(c_s_mem1&amp;8)*4,(c_s_mem1&amp;16)*2,(c_s_mem1&amp;32)*1,0,0)
	#affiche les minutes enregistrées en binaire sur le cercle
	call leds.circle((c_m_mem1&amp;1)*32,(c_m_mem1&amp;2)*16,(c_m_mem1&amp;4)*8,(c_m_mem1&amp;8)*4,(c_m_mem1&amp;16)*2,(c_m_mem1&amp;32)*1,0,0)
	#affiche les heures enregistrées en binaire sur les boutons
	call leds.buttons((c_h_mem1&amp;1)*32,(c_h_mem1&amp;2)*16,(c_h_mem1&amp;4)*8,(c_h_mem1&amp;8)*4)

elseif prox.horizontal[5]>=200 then	#Tant que la main est sur le capteur arrière gauche, affiche le temps enregistré N°2

	#affiche les secondes enregistrées en binaire sur les capteurs frontaux
	call leds.prox.h((c_s_mem2&amp;1)*32,(c_s_mem2&amp;2)*16,(c_s_mem2&amp;4)*8,(c_s_mem2&amp;8)*4,(c_s_mem2&amp;16)*2,(c_s_mem2&amp;32)*1,0,0)
	#affiche les minutes enregistrées en binaire sur le cercle
	call leds.circle((c_m_mem2&amp;1)*32,(c_m_mem2&amp;2)*16,(c_m_mem2&amp;4)*8,(c_m_mem2&amp;8)*4,(c_m_mem2&amp;16)*2,(c_m_mem2&amp;32)*1,0,0)
	#affiche les heures enregistrées en binaire sur les boutons
	call leds.buttons((c_h_mem2&amp;1)*32,(c_h_mem2&amp;2)*16,(c_h_mem2&amp;4)*8,(c_h_mem2&amp;8)*4)


elseif prox.horizontal[6]>=200 then	#Tant que la main est sur le capteur arrière droit, affiche le temps enregistré N°3

	#affiche les secondes enregistrées en binaire sur les capteurs frontaux
	call leds.prox.h((c_s_mem3&amp;1)*32,(c_s_mem3&amp;2)*16,(c_s_mem3&amp;4)*8,(c_s_mem3&amp;8)*4,(c_s_mem3&amp;16)*2,(c_s_mem3&amp;32)*1,0,0)
	#affiche les minutes enregistrées en binaire sur le cercle
	call leds.circle((c_m_mem3&amp;1)*32,(c_m_mem3&amp;2)*16,(c_m_mem3&amp;4)*8,(c_m_mem3&amp;8)*4,(c_m_mem3&amp;16)*2,(c_m_mem3&amp;32)*1,0,0)
	#affiche les heures en binaire sur les boutons
	call leds.buttons((c_h_mem3&amp;1)*32,(c_h_mem3&amp;2)*16,(c_h_mem3&amp;4)*8,(c_h_mem3&amp;8)*4)

else 
	
	#affiche les secondes en binaire sur les capteurs frontaux
	call leds.prox.h((c_s&amp;1)*32,(c_s&amp;2)*16,(c_s&amp;4)*8,(c_s&amp;8)*4,(c_s&amp;16)*2,(c_s&amp;32)*1,0,0)
	#affiche les minutes en binaire sur le cercle
	call leds.circle((c_m&amp;1)*32,(c_m&amp;2)*16,(c_m&amp;4)*8,(c_m&amp;8)*4,(c_m&amp;16)*2,(c_m&amp;32)*1,0,0)
	#affiche les heures en binaire sur les boutons
	call leds.buttons((c_h&amp;1)*32,(c_h&amp;2)*16,(c_h&amp;4)*8,(c_h&amp;8)*4)
	
end

#FIN CHRONO
##########################################################</node>


</network>
