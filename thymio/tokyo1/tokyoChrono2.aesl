<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="45620" name="thymio-II"># Auteur : Hugo Ducommun
# Date : 21 septembre 2018
# Système de chronomètre jusqu'à 15 heures maximum pouvant stocker un temps intermédiaire

##########################################################
#DÉCLARATION DES VARIABLES

var c_h = 0	#Temps du chrono normal
var c_m = 0
var c_s = 0

var c_h_mem1 = 0 #Temps enregistré N°1
var c_m_mem1 = 0
var c_s_mem1 = 0

var c_state = 0  #État du chronomètre (0 = éteint, 1 = allumé et 2 = arrêté)
var c_mem = 0	 #Si le temps intermédiaire est déjà enregistré

#FIN DÉCLARATION DES VARIABLES
##########################################################
#DÉBUT CHRONO

call leds.prox.v(0, 0)#Éteint les leds inutiles pour le programme
call leds.sound(0)
call leds.rc(0)
call leds.temperature(0, 0)

call leds.prox.h(0, 0, 0, 0, 0, 0, 0, 0) #Remet à zéro les leds d'indication de temps
call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)
call leds.buttons(0, 0, 0, 0)

call leds.top(32, 32, 0) #S'allume en jaune pour indiquer le mode chronomètre de la Tokyo Watch


onevent buttons

when button.center==1 do	#Choisis si le chrono démarre, s'arrête ou s'efface en appuyant sur le bouton central
	if c_state==0 then	#Passe en état allumé si on appuie sur le bouton avec l'état éteint
		c_state++
		timer.period[1] = 1
	elseif c_state==1 then	#Passe en état arrêté si on appuie sur le bouton avec l'état allumé
		c_state++
		timer.period[1] = 0
	else
		c_state=0	#Passe en état éteint si on appuie sur le bouton avec l'état arrêté
		c_h=0	#Reset toutes les variables dans l'éventualité de relancer le chrono
		c_m=0
		c_s=0
		
		c_h_mem1=0
		c_m_mem1=0
		c_s_mem1=0
		
		call leds.prox.h(0, 0, 0, 0, 0, 0, 0, 0) #Remet les leds d'indication du temps à zéro
		call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)
		call leds.buttons(0, 0, 0, 0)
	end
end

when button.backward == 1 do	#Enregistre le temps en appuyant sur le bouton arrière, 3 enregistrements possibles
	if  c_mem == 0 then	#Enregistre le temps intermédiaire s'il n'est encore enregistré
		c_mem++
		c_h_mem1 = c_h
		c_m_mem1 = c_m
		c_s_mem1 = c_s
	else 
		#Si l'on enregistre le temps alors qu'il est déjà enregistré, ne fait rien.
	end
end

##########################################################

onevent timer1 #Chaque seconde

	c_s++ #Incrémente les secondes
	
	when c_s >= 60 do #Reset les secondes chaque minute
		c_s = 0
		c_m++ #Incrémente les minutes chaque 60s
	end
	
	when c_m >= 60 do #Reset les minutes chaque heure
		c_m = 0
		c_h++ #Incrémente l'heure chaque 60minutes
	end
	
	when c_h >= 15 do #Arrête le chronomètre après 15 heures passées
		c_state++	  #Passe en état arrêté
		timer.period[1] = 0
	end

##########################################################
#AFFICHE LE TEMPS INTERMEDIAIRE

onevent prox

if prox.ground.reflected[0]>=300 or prox.ground.reflected[1]>=300 then	#Tant que la main est sur les capteurs du dessous, 		           																		 affiche le temps enregistré.	
	#affiche les secondes enregistrées en binaire sur les capteurs frontaux
	call leds.prox.h((c_s_mem1&amp;1)*32,(c_s_mem1&amp;2)*16,(c_s_mem1&amp;4)*8,(c_s_mem1&amp;8)*4,(c_s_mem1&amp;16)*2,(c_s_mem1&amp;32)*1,0,0)
	#affiche les minutes enregistrées en binaire sur le cercle
	call leds.circle((c_m_mem1&amp;1)*32,(c_m_mem1&amp;2)*16,(c_m_mem1&amp;4)*8,(c_m_mem1&amp;8)*4,(c_m_mem1&amp;16)*2,(c_m_mem1&amp;32)*1,0,0)
	#affiche les heures enregistrées en binaire sur les boutons
	call leds.buttons((c_h_mem1&amp;1)*32,(c_h_mem1&amp;2)*16,(c_h_mem1&amp;4)*8,(c_h_mem1&amp;8)*4)
else
	#affiche les secondes en binaire sur les capteurs frontaux
	call leds.prox.h((c_s&amp;1)*32,(c_s&amp;2)*16,(c_s&amp;4)*8,(c_s&amp;8)*4,(c_s&amp;16)*2,(c_s&amp;32)*1,0,0)
	#affiche les minutes en binaire sur le cercle
	call leds.circle((c_m&amp;1)*32,(c_m&amp;2)*16,(c_m&amp;4)*8,(c_m&amp;8)*4,(c_m&amp;16)*2,(c_m&amp;32)*1,0,0)
	#affiche les heures en binaire sur les boutons
	call leds.buttons((c_h&amp;1)*32,(c_h&amp;2)*16,(c_h&amp;4)*8,(c_h&amp;8)*4)
end

#FIN CHRONO
##########################################################</node>


</network>
